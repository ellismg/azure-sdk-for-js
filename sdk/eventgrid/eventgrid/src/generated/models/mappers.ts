/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";


export const EventGridEvent: coreHttp.CompositeMapper = {
  serializedName: "EventGridEvent",
  type: {
    name: "Composite",
    className: "EventGridEvent",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      topic: {
        serializedName: "topic",
        type: {
          name: "String"
        }
      },
      subject: {
        required: true,
        serializedName: "subject",
        type: {
          name: "String"
        }
      },
      data: {
        required: true,
        serializedName: "data",
        type: {
          name: "Object"
        }
      },
      eventType: {
        required: true,
        serializedName: "eventType",
        type: {
          name: "String"
        }
      },
      eventTime: {
        required: true,
        serializedName: "eventTime",
        type: {
          name: "DateTime"
        }
      },
      metadataVersion: {
        readOnly: true,
        serializedName: "metadataVersion",
        type: {
          name: "String"
        }
      },
      dataVersion: {
        required: true,
        serializedName: "dataVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudEventEvent: coreHttp.CompositeMapper = {
  serializedName: "CloudEventEvent",
  type: {
    name: "Composite",
    className: "CloudEventEvent",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      source: {
        required: true,
        serializedName: "source",
        type: {
          name: "String"
        }
      },
      data: {
        serializedName: "data",
        type: {
          name: "Object"
        }
      },
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      time: {
        serializedName: "time",
        type: {
          name: "DateTime"
        }
      },
      specversion: {
        required: true,
        serializedName: "specversion",
        type: {
          name: "String"
        }
      },
      dataschema: {
        serializedName: "dataschema",
        type: {
          name: "String"
        }
      },
      datacontenttype: {
        serializedName: "datacontenttype",
        type: {
          name: "String"
        }
      },
      subject: {
        serializedName: "subject",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubscriptionValidationEventData: coreHttp.CompositeMapper = {
  serializedName: "SubscriptionValidationEventData",
  type: {
    name: "Composite",
    className: "SubscriptionValidationEventData",
    modelProperties: {
      validationCode: {
        readOnly: true,
        serializedName: "validationCode",
        type: {
          name: "String"
        }
      },
      validationUrl: {
        readOnly: true,
        serializedName: "validationUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubscriptionValidationResponse: coreHttp.CompositeMapper = {
  serializedName: "SubscriptionValidationResponse",
  type: {
    name: "Composite",
    className: "SubscriptionValidationResponse",
    modelProperties: {
      validationResponse: {
        serializedName: "validationResponse",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubscriptionDeletedEventData: coreHttp.CompositeMapper = {
  serializedName: "SubscriptionDeletedEventData",
  type: {
    name: "Composite",
    className: "SubscriptionDeletedEventData",
    modelProperties: {
      eventSubscriptionId: {
        readOnly: true,
        serializedName: "eventSubscriptionId",
        type: {
          name: "String"
        }
      }
    }
  }
};
