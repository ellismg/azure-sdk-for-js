/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { GeneratedClientContext } from "./generatedClientContext";

class GeneratedClient extends GeneratedClientContext {
  /**
   * Initializes a new instance of the GeneratedClient class.
   * @param apiVersion Version of the API to be used with the client request.
   * @param [options] The parameter options
   */
  constructor(apiVersion: string, options?: coreHttp.ServiceClientOptions) {
    super(apiVersion, options);
  }

  /**
   * Publishes a batch of events to an Azure Event Grid topic.
   * @param topicHostname The host name of the topic, e.g. topic1.westus2-1.eventgrid.azure.net
   * @param events An array of events to be published to Event Grid.
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  publishEvents(topicHostname: string, events: Models.EventGridEvent[], options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param topicHostname The host name of the topic, e.g. topic1.westus2-1.eventgrid.azure.net
   * @param events An array of events to be published to Event Grid.
   * @param callback The callback
   */
  publishEvents(topicHostname: string, events: Models.EventGridEvent[], callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param topicHostname The host name of the topic, e.g. topic1.westus2-1.eventgrid.azure.net
   * @param events An array of events to be published to Event Grid.
   * @param options The optional parameters
   * @param callback The callback
   */
  publishEvents(topicHostname: string, events: Models.EventGridEvent[], options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  publishEvents(topicHostname: string, events: Models.EventGridEvent[], options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.sendOperationRequest(
      {
        topicHostname,
        events,
        options
      },
      publishEventsOperationSpec,
      callback);
  }

  /**
   * Publishes a batch of events to an Azure Event Grid topic.
   * @param topicHostname The host name of the topic, e.g. topic1.westus2-1.eventgrid.azure.net
   * @param events An array of events to be published to Event Grid.
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  publishCloudEventEvents(topicHostname: string, events: Models.CloudEventEvent[], options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param topicHostname The host name of the topic, e.g. topic1.westus2-1.eventgrid.azure.net
   * @param events An array of events to be published to Event Grid.
   * @param callback The callback
   */
  publishCloudEventEvents(topicHostname: string, events: Models.CloudEventEvent[], callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param topicHostname The host name of the topic, e.g. topic1.westus2-1.eventgrid.azure.net
   * @param events An array of events to be published to Event Grid.
   * @param options The optional parameters
   * @param callback The callback
   */
  publishCloudEventEvents(topicHostname: string, events: Models.CloudEventEvent[], options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  publishCloudEventEvents(topicHostname: string, events: Models.CloudEventEvent[], options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.sendOperationRequest(
      {
        topicHostname,
        events,
        options
      },
      publishCloudEventEventsOperationSpec,
      callback);
  }

  /**
   * Publishes a batch of events to an Azure Event Grid topic.
   * @param topicHostname The host name of the topic, e.g. topic1.westus2-1.eventgrid.azure.net
   * @param events An array of events to be published to Event Grid.
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  publishCustomEventEvents(topicHostname: string, events: any[], options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param topicHostname The host name of the topic, e.g. topic1.westus2-1.eventgrid.azure.net
   * @param events An array of events to be published to Event Grid.
   * @param callback The callback
   */
  publishCustomEventEvents(topicHostname: string, events: any[], callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param topicHostname The host name of the topic, e.g. topic1.westus2-1.eventgrid.azure.net
   * @param events An array of events to be published to Event Grid.
   * @param options The optional parameters
   * @param callback The callback
   */
  publishCustomEventEvents(topicHostname: string, events: any[], options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  publishCustomEventEvents(topicHostname: string, events: any[], options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.sendOperationRequest(
      {
        topicHostname,
        events,
        options
      },
      publishCustomEventEventsOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const publishEventsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "api/events",
  urlParameters: [
    Parameters.topicHostname
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: "events",
    mapper: {
      required: true,
      serializedName: "events",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "EventGridEvent"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const publishCloudEventEventsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "api/events",
  urlParameters: [
    Parameters.topicHostname
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: "events",
    mapper: {
      required: true,
      serializedName: "events",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Composite",
            className: "CloudEventEvent"
          }
        }
      }
    }
  },
  contentType: "application/cloudevents-batch+json; charset=utf-8",
  responses: {
    200: {},
    default: {}
  },
  serializer
};

const publishCustomEventEventsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "api/events",
  urlParameters: [
    Parameters.topicHostname
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  requestBody: {
    parameterPath: "events",
    mapper: {
      required: true,
      serializedName: "events",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "Object"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    default: {}
  },
  serializer
};

export {
  GeneratedClient,
  GeneratedClientContext,
  Models as GeneratedModels,
  Mappers as GeneratedMappers
};
